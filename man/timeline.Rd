% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/timeline.R
\name{timeline}
\alias{timeline}
\title{Interactive Timeline Plots}
\usage{
timeline(data = NULL, dateFormat = NULL, bandStart = NULL,
  bandEnd = NULL, extent = NULL, padding = NULL, maxBandHeight = NULL,
  children = NULL, colorScale = NULL, width = NULL, height = NULL)
}
\arguments{
\item{data}{\code{data.frame} of data to be plotted}

\item{dateFormat}{function that returns the values for the start and end of the bands. Defaults to function (d) {return new Date(d)}. The timeline layout can plot floats and ints for relative time (see the simple example that uses integer positions for start and end points).}

\item{bandStart}{function that returns the start of the band. Remember that it will also be passed through timeline.dateFormat. Defaults to function (d) {return d.start}.}

\item{bandEnd}{function that returns the start of the band. Remember that it will also be passed through timeline.dateFormat. Defaults to function (d) {return d.end}. If you want to use duration-based notation, you might try something like function (d) {return d.start + d.duration}.}

\item{extent}{extent of the timeline. By default, the extent is set to the minimum start and maximum end, but if you have a range you'd rather set the timeline to, you can do so. This is also passed through #timeline.dateFormat.}

\item{padding}{distance in pixels between lanes. Defaults to 0.}

\item{maxBandHeight}{maximum band height. Defaults to Infinity (bands will fill the given height in the timeline.size array minus any necessary padding).}

\item{children}{children accessor, for use with hierarchical timeline data. Typically children are stored in an array in .children or .values. Set to return null or false to disable hierarchical support. Hierarchical data can be a hierarchical JSON object (like the ubiquitous flare.json dataset) or an array of objects with each having child elements.}

\item{colorScale}{function to color the timeline bands}

\item{width,height}{a valid \code{CSS} unit for the width and height of the
         htmlwidget container}
}
\description{
Easily create interactive \code{d3.js} timelines using the
\href{https://github.com/emeeks/d3.layout.timeline}{d3.layout.timeline} layout from Elijah Meeks.  Since
we leverage the infrastructure of htmlwidgets, these interactive
timelines should work seamlessly in all R contexts, including the console,
RStudio, rmarkdown, and Shiny.
}
\examples{
library(timelineR)

# simple example provided by d3.layout.timeline
#   author Elijah Meeks
#   http://bl.ocks.org/emeeks/d24171dac80dd535521b
timeline(
  read.csv("http://bl.ocks.org/emeeks/raw/d24171dac80dd535521b/int_bands.csv"),
  bandStart = htmlwidgets::JS("function (d) {return d.s}"),
  bandEnd = htmlwidgets::JS("function (d) {return d.e}"),
  dateFormat = htmlwidgets::JS("function (d) {return parseInt(d)}")
)


# example with dates provided by d3.layout.timeline author
#  Elijah Meeks
#  http://bl.ocks.org/emeeks/280cb0607c68faf30bb5

timeline(
  read.csv("http://bl.ocks.org/emeeks/raw/280cb0607c68faf30bb5/wars.csv"),
  colorScale = htmlwidgets::JS(
'
function(d){
  var color = d3.scale.ordinal()
    .domain(["European","Native","Colonial","Latin America","Internal"])
    .range(["#96abb1", "#313746", "#b0909d", "#687a97", "#292014"]);
  return color(d.sphere);
}
'    
  )
)
}

